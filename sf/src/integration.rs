use crate::traits::*;

// Trapezoidal
// Erf / Tanh/Sinh ("stretched trapezoidal")
// Simpson's
// Gaussian &c.
// adaptive? (may not need for purposes of spec.fun. implementations)
//
// extrapolation / sequence acceleration?

// TODO: lots of other possibilities,
// including returning a lot more information...
// allow separate domain & range types?
pub trait Integrator<X> {
  fn domain(&self) -> (X, X);
  fn integrate<F>(&self, f: F) -> X
    where F: Fn(X) -> X;
}

////////////////////////////////////////////////////////////////////////////////

// use trapezoidal rule to integrate on interval [a,b]
// will actually evaluate f at n+1 points
// non-adaptive, simply computes the sum
#[derive(Clone,Copy,Debug,PartialEq)]
pub struct Trapezoidal<X> {
  a: X,
  b: X,
  h: X,
  n: isize,
}

impl<X:Value> Trapezoidal<X> {
  pub fn new(a:X, b:X, n:usize) -> Self {
    let n = (n as isize).max(1);
    let h = (b - a) / n;
    Trapezoidal { a, b, h, n }
  }
}

impl<X:Value> Integrator<X> for Trapezoidal<X> {
  fn domain(&self) -> (X, X) { (self.a, self.b) }
  fn integrate<F:Fn(X)->X>(&self, f: F) -> X {
    let mut sum: X = (f(self.a) + f(self.b)) / 2;
    for i in 1..self.n {
      sum += f(self.a + self.h * i);
    }
    sum * self.h
  }
}

////////////////////////////////////////////////////////////////////////////////

use crate::trig::{*};

#[derive(Clone,Copy,Debug,PartialEq)]
pub struct TanhRule<X> {
  a: X,
  b: X,
  h: X,
  n: isize,
}

impl<X:Value> TanhRule<X> {
  pub fn new(a:X, b:X, n:usize) -> Self {
    let n = ((n/2) as isize).max(1);
    let h = X::PI/sf_sqrt(Î¹(2*n):X);
    TanhRule { a, b, h, n }
  }
}

// TODO: cleanup to allow separate domain & range
impl<X:Value+Trig+std::fmt::LowerExp> Integrator<X> for TanhRule<X> {
  fn domain(&self) -> (X, X) { (self.a, self.b) }
  fn integrate<F:Fn(X)->X>(&self, f: F) -> X {
    let mut sum = X::zero;
    for k in -self.n..(self.n+1) {
      let t = self.h * k;
      let xk = (self.b+self.a)/2 + (self.b-self.a)/2 * sf_tanh(t);
      let wk = (self.b - xk)*(xk - self.a)*2/(self.b - self.a);
      let fx = f(xk);
      sum += self.h * wk * fx;
    }
    sum
  }
}

////////////////////////////////////////////////////////////////////////////////

pub const GAUSS_LAGUERRE_23__MINUS16_XW : [(f64,f64); 23] = [
(0.049002324371591840306,0.22190661574048635538),
(0.29530892594874725178,0.32104976470008496016),
(0.7536138185285887951545,0.278749135218214369837),
(1.426134556419966046761,0.1767533394965254559499),
(2.316024117486417130275,0.085768604825166283443),
(3.42754777110858566473,0.0323649818240780976858),
(4.76620905785530189515,0.0095437317879520212865),
(6.338912250703311815804,0.00219727093568472542502),
(8.15417901904800412076,3.93148051086767951958e-4),
(10.22243803068820728583,5.42468622855624168575e-5),
(12.55641426652768159006,5.71056297226460570316e-6),
(15.1716583032377972468,4.52274883380842870632e-7),
(18.0872778846009670785,2.647475826439460948804e-8),
(21.32697136926332214368,1.11999146278270073486e-9),
(24.92052829583340470665,3.32778316600523246748e-11),
(28.90608392557213166864,6.69403188135392417644e-13),
(33.33365389681871113026,8.68586931031147065516e-15),
(38.27098189613715205865,6.80879193066501873168e-17),
(43.81391104513859513204,2.9392647035826944268e-19),
(50.10658055247607312484,6.08154888669877801016e-22),
(57.38634001743254160404,4.80417922537747243469e-25),
(66.10656201861103391749,9.420868501665319089e-29),
(77.43033332285853341849,1.55075461341823859578e-33),
];

pub const GAUSS_LAGUERRE_31__MINUS16_XW : [(f64,f64); 31] = [
(0.036522647328503509959,0.17586432444613712748),
(0.220015204475143469789,0.27073761778435636951),
(0.56105879494706826401,0.2639569283919817568983),
(1.060601768819224091469,0.198584895894565763191),
(1.71992834161345682058,0.1210259110847412642397),
(2.54074661704199241945,0.060869396028334219468),
(3.525219508135736550245,0.0254706998524582723923),
(4.675998408487434218708,0.008896965036390985626383),
(5.996264962691047116714,0.002595730985026274276425),
(7.48978319393148230507,6.31783691684456499381e-4),
(9.160964317142089903928,1.2795061355048080865e-4),
(11.01494719689333321795,2.148017742901447252543e-5),
(13.05769836962850538302,2.97453271841657528127e-6),
(15.29613690399742024734,3.37711217487728408601e-7),
(17.73829128807945658912,3.12058215642308271185e-8),
(20.39349828433968086645,2.32647022458181265871e-9),
(23.2726577269908978185,1.384951693641761203694e-10),
(26.38856328166026057054,6.5030071504899334265e-12),
(29.75633847390790131618,2.37349818522089644885e-13),
(33.39402196211773333139,6.61688485881977495e-15),
(37.32336994620830752938,1.37946242241157132683e-16),
(41.57098404046517325882,2.095524502368928855981e-18),
(46.1699442669051471296,2.24586941284345589486e-20),
(51.16225909554449008362,1.62999520688889001886e-22),
(56.60270492076548931907,7.5946764296094457962e-25),
(62.56517947799614396278,2.11406726349682512438e-27),
(69.15397796792722441543,3.1771582432328389273e-30),
(76.52577385703082299522,2.2153508451285478668e-33),
(84.9385629849746199209,5.5912112168394176093e-37),
(94.88569604030576919858,3.19008374061398753179e-41),
(107.63562348298177751,1.25165427667877407484e-46),
];

pub const GAUSS_LAGUERRE_41__MINUS16_XW__STRING: [(&'static str,&'static str); 41] = [
("0.027703645095823517273349781575140153732743994025","0.140918760388859486381342012564859690306674549007"),
("0.166854348569230249322081514920060420018634249922","0.226689961025319724197601229386393011504043549017"),
("0.42532984637410945609826250600411762141463043266","0.2398657006672676649275407399269710490346961823891"),
("0.803570128220308366637287791555849664989494466163","0.203521029259277259282081931809441736321026780666"),
("1.302133026432504173324842403702299802634402246003","0.145464547010314556049982337169754504962426578086"),
("1.921751635600974175121739696406158881289150454085","0.0893097407210766050839619967873756574154692844889"),
("2.663344839842801761001000575391964024262637912744","0.04754444739229456095180147239399552648560141010039"),
("3.5280257834820592053834090735058253494778585870054","0.02205243634965759299839855531952948387389423868229"),
("4.517111564011742175137836511927423733147243322552","0.00893356915786867065997861712518398395412115035926"),
("5.632134807561627574069487726628227243134750711069","0.00316398370952914865970652375575650998032248764124"),
("6.8748574787127153094994872088879798306182200945302","9.79697819058361848667317413483532555212116660715e-4"),
("8.2472872666964806491914316859175448835517667667241","2.65029600368809697607815617597702360166237167765e-4"),
("9.751696947384643927021176532578789317709619904702","6.255821045397624669314471305150459486029449280229e-5"),
("11.390647208593524972606803688844023968402674360117","1.286131542599119506723832712250411250702546795412e-5"),
("13.167013541581374996184799436312506986543450544273","2.297824494031805217009889409796539841892769450716e-6"),
("15.084017949261424759999834315754383698935708571681","3.557938515164454302410995903457333525491349934525e-7"),
("17.145266411031126285545501994976427722824034827893","4.759341742518013787159828804066679984128304903413e-8"),
("19.354793289000028465285724117670326066692793933703","5.479814947713515866965194131671917472447084751463e-9"),
("21.717114180225119924921897247543667341660180601282","5.4079157842152216626676434400904326622644454703913e-10"),
("24.237289141851330220944278802212240831909708086532","4.552626075007941202138749260150963991472841406684e-11"),
("26.920998780194314656129039292414953002648495786159","3.25165681885981634853718988035215610286312040746e-12"),
("29.774636457967708636116473135810681398218697308849","1.958320173452587707509590413391027175898298887041e-13"),
("32.805420920358511531693383237549395682624205021623","9.87555745067184451487481672222817972595685356654e-15"),
("36.021535096983988962563548135247817186006325336672","4.136953511403800855387219481707744782588650267665e-16"),
("39.432298896324365343988160830275991586330221897069","1.426560267812501614958236003229731978122265234891e-17"),
("43.048386773943914185266566065717003597003730772782","4.00732929413164096572629010700796667818630058799e-19"),
("46.882105207993966410406062403055526384040370956131","9.06021921748593811227674223564837401011487706838e-21"),
("50.947751745508161259816909506509949275987049990123","1.625739393964119946645299677122268766858874932755e-22"),
("55.262087323574523271076658333034493080458935880713","2.27744498436706679878037893034492617423567378871e-24"),
("59.844969441221233862284858046360213254938175334449","2.44266586703792244837531128269116608453265655711e-26"),
("64.720219651732790217037517432435696171074723284633","1.959498799947888460922094072538964297617094646078e-28"),
("69.9168426529128326627632254350660564974594515034","1.1426991637551840752137751432112698149449170732e-30"),
("75.470791572709491833007797881380331194575077412364","4.676449405715699985730758631285838325791610278879e-33"),
("81.427617513497596764892990251508606943565085251977","1.284466902185024582321226115553817458133119578827e-35"),
("87.846624098589268209146032134428542943965315087705","2.234410942527607391319915613829237283688504406263e-38"),
("94.807747349801864930837449063276020137226452064595","2.27692298243613706767052587159087672765468390591e-41"),
("102.42377681959596160080493681742066962116565151746","1.21781961226928442915506422419814257579811379133e-44"),
("110.86420205116883992549484832640574788291465778647","2.90028854285835699928438112611013649531253351249e-48"),
("120.40836953645037207032907290149378557845607260231","2.34847589836859180911011607931320104932490445214e-52"),
("131.59123208598748115158780519410059875312683389042","3.87311136361934306252832313331135355902171608429e-57"),
("145.7911096506205290168530996308596289519314339131","3.544487245309502996262021070881329202842416580344e-63"),
];
