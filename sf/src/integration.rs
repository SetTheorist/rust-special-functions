use crate::traits::*;

// Trapezoidal
// Erf / Tanh/Sinh ("stretched trapezoidal")
// Simpson's
// Gaussian &c.
// adaptive? (may not need for purposes of spec.fun. implementations)
//
// extrapolation / sequence acceleration?

// TODO: lots of other possibilities,
// including returning a lot more information...
// allow separate domain & range types?
pub trait Integrator<X> {
  fn domain(&self) -> (X, X);
  fn integrate<F>(&self, f: F) -> X
    where F: Fn(X) -> X;
}

////////////////////////////////////////////////////////////////////////////////

// use trapezoidal rule to integrate on interval [a,b]
// will actually evaluate f at n+1 points
// non-adaptive, simply computes the sum
#[derive(Clone,Copy,Debug,PartialEq)]
pub struct Trapezoidal<X> {
  a: X,
  b: X,
  h: X,
  n: isize,
}

impl<X:Value> Trapezoidal<X> {
  pub fn new(a:X, b:X, n:usize) -> Self {
    let n = (n as isize).max(1);
    let h = (b - a) / n;
    Trapezoidal { a, b, h, n }
  }
}

impl<X:Value> Integrator<X> for Trapezoidal<X> {
  fn domain(&self) -> (X, X) { (self.a, self.b) }
  fn integrate<F:Fn(X)->X>(&self, f: F) -> X {
    let mut sum: X = (f(self.a) + f(self.b)) / 2;
    for i in 1..self.n {
      sum += f(self.a + self.h * i);
    }
    sum * self.h
  }
}

////////////////////////////////////////////////////////////////////////////////

use crate::trig::{*};

#[derive(Clone,Copy,Debug,PartialEq)]
pub struct TanhRule<X> {
  a: X,
  b: X,
  h: X,
  n: isize,
}

impl<X:Value> TanhRule<X> {
  pub fn new(a:X, b:X, n:usize) -> Self {
    let n = ((n/2) as isize).max(1);
    let h = X::PI/sf_sqrt(Î¹(2*n):X);
    TanhRule { a, b, h, n }
  }
}

// TODO: cleanup to allow separate domain & range
impl<X:Value+Trig+std::fmt::LowerExp> Integrator<X> for TanhRule<X> {
  fn domain(&self) -> (X, X) { (self.a, self.b) }
  fn integrate<F:Fn(X)->X>(&self, f: F) -> X {
    let mut sum = X::zero;
    for k in -self.n..(self.n+1) {
      let t = self.h * k;
      let xk = (self.b+self.a)/2 + (self.b-self.a)/2 * sf_tanh(t);
      let wk = (self.b - xk)*(xk - self.a)*2/(self.b - self.a);
      let fx = f(xk);
      sum += self.h * wk * fx;
    }
    sum
  }
}

////////////////////////////////////////////////////////////////////////////////

pub const GAUSS_LAGUERRE_23__MINUS16_XW : [(f64,f64); 23] = [
(0.049002324371591840306,0.22190661574048635538),
(0.29530892594874725178,0.32104976470008496016),
(0.7536138185285887951545,0.278749135218214369837),
(1.426134556419966046761,0.1767533394965254559499),
(2.316024117486417130275,0.085768604825166283443),
(3.42754777110858566473,0.0323649818240780976858),
(4.76620905785530189515,0.0095437317879520212865),
(6.338912250703311815804,0.00219727093568472542502),
(8.15417901904800412076,3.93148051086767951958e-4),
(10.22243803068820728583,5.42468622855624168575e-5),
(12.55641426652768159006,5.71056297226460570316e-6),
(15.1716583032377972468,4.52274883380842870632e-7),
(18.0872778846009670785,2.647475826439460948804e-8),
(21.32697136926332214368,1.11999146278270073486e-9),
(24.92052829583340470665,3.32778316600523246748e-11),
(28.90608392557213166864,6.69403188135392417644e-13),
(33.33365389681871113026,8.68586931031147065516e-15),
(38.27098189613715205865,6.80879193066501873168e-17),
(43.81391104513859513204,2.9392647035826944268e-19),
(50.10658055247607312484,6.08154888669877801016e-22),
(57.38634001743254160404,4.80417922537747243469e-25),
(66.10656201861103391749,9.420868501665319089e-29),
(77.43033332285853341849,1.55075461341823859578e-33),
];

pub const GAUSS_LAGUERRE_31__MINUS16_XW : [(f64,f64); 31] = [
(0.036522647328503509959,0.17586432444613712748),
(0.220015204475143469789,0.27073761778435636951),
(0.56105879494706826401,0.2639569283919817568983),
(1.060601768819224091469,0.198584895894565763191),
(1.71992834161345682058,0.1210259110847412642397),
(2.54074661704199241945,0.060869396028334219468),
(3.525219508135736550245,0.0254706998524582723923),
(4.675998408487434218708,0.008896965036390985626383),
(5.996264962691047116714,0.002595730985026274276425),
(7.48978319393148230507,6.31783691684456499381e-4),
(9.160964317142089903928,1.2795061355048080865e-4),
(11.01494719689333321795,2.148017742901447252543e-5),
(13.05769836962850538302,2.97453271841657528127e-6),
(15.29613690399742024734,3.37711217487728408601e-7),
(17.73829128807945658912,3.12058215642308271185e-8),
(20.39349828433968086645,2.32647022458181265871e-9),
(23.2726577269908978185,1.384951693641761203694e-10),
(26.38856328166026057054,6.5030071504899334265e-12),
(29.75633847390790131618,2.37349818522089644885e-13),
(33.39402196211773333139,6.61688485881977495e-15),
(37.32336994620830752938,1.37946242241157132683e-16),
(41.57098404046517325882,2.095524502368928855981e-18),
(46.1699442669051471296,2.24586941284345589486e-20),
(51.16225909554449008362,1.62999520688889001886e-22),
(56.60270492076548931907,7.5946764296094457962e-25),
(62.56517947799614396278,2.11406726349682512438e-27),
(69.15397796792722441543,3.1771582432328389273e-30),
(76.52577385703082299522,2.2153508451285478668e-33),
(84.9385629849746199209,5.5912112168394176093e-37),
(94.88569604030576919858,3.19008374061398753179e-41),
(107.63562348298177751,1.25165427667877407484e-46),
];
